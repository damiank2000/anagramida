{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/Game.jsx\";\nimport GameBoard from \"./GameBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateLines = () => {\n  const numberOfRows = 10;\n  let rows = new Array();\n\n  for (var i = 0; i < numberOfRows; i++) {\n    rows.push({\n      column: 1\n    });\n  } //return rows;\n\n\n  return [{}, {\n    column: 1\n  }, {}];\n};\n\nexport default function Game() {\n  return /*#__PURE__*/_jsxDEV(GameBoard, {\n    word: \"anagramida\",\n    lines: [{}, {\n      column: 1\n    }, {\n      column: 2\n    }, {\n      column: 3\n    }, {\n      column: 4\n    }, {}]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/Game.jsx"],"names":["GameBoard","generateLines","numberOfRows","rows","Array","i","push","column","Game"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAExB,QAAMC,YAAY,GAAG,EAArB;AAEA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAApB,EAAkCG,CAAC,EAAnC,EAAuC;AACnCF,IAAAA,IAAI,CAACG,IAAL,CAAU;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAV;AACH,GAPuB,CAQxB;;;AACA,SAAO,CAAC,EAAD,EAAK;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAAL,EAAoB,EAApB,CAAP;AACH,CAVD;;AAaA,eAAe,SAASC,IAAT,GAAgB;AAC3B,sBACI,QAAC,SAAD;AAAW,IAAA,IAAI,EAAC,YAAhB;AAA6B,IAAA,KAAK,EAAE,CAChC,EADgC,EAEhC;AAAED,MAAAA,MAAM,EAAE;AAAV,KAFgC,EAGhC;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAHgC,EAIhC;AAAEA,MAAAA,MAAM,EAAE;AAAV,KAJgC,EAKhC;AAAEA,MAAAA,MAAM,EAAE;AAAV,KALgC,EAMhC,EANgC;AAApC;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;KAXuBC,I","sourcesContent":["import GameBoard from \"./GameBoard\";\n\nconst generateLines = () => {\n\n    const numberOfRows = 10;\n\n    let rows = new Array();\n    for (var i = 0; i < numberOfRows; i++) {\n        rows.push({ column: 1 });\n    }\n    //return rows;\n    return [{}, { column: 1 }, {}];\n};\n\n\nexport default function Game() {\n    return (\n        <GameBoard word=\"anagramida\" lines={[\n            {},\n            { column: 1 },\n            { column: 2 },\n            { column: 3 },\n            { column: 4 },\n            {}\n        ]} />\n    );\n}"]},"metadata":{},"sourceType":"module"}