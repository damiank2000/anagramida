{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/GameBoard.jsx\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n  const beforeLetters = leftSwapLetterPosition > 0 ? word.slice(0, leftSwapLetterPosition) : \"\";\n  const leftLetter = word.charAt(leftSwapLetterPosition);\n  const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n  const afterLetters = word.slice(leftSwapLetterPosition + 2);\n  return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {};\n\nexport default function GameBoard(_ref) {\n  let {\n    word,\n    lines\n  } = _ref;\n  let scrambledWord = `${word}`;\n  lines.forEach(element => {\n    console.log(`Swapping column ${element.column}`);\n    scrambledWord = swapLetters(scrambledWord, element.column - 1);\n    console.log(`New word '${scrambledWord}'`);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/GameBoard.jsx"],"names":["styled","swapLetters","word","leftSwapLetterPosition","beforeLetters","slice","leftLetter","charAt","rightLetter","afterLetters","scrambleWord","lines","GameBoard","scrambledWord","forEach","element","console","log","column"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,mBAAnB;;;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,sBAAP,KAAkC;AAClD,QAAMC,aAAa,GACfD,sBAAsB,GAAG,CAAzB,GACID,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,sBAAd,CADJ,GAEI,EAHR;AAIA,QAAMG,UAAU,GAAGJ,IAAI,CAACK,MAAL,CAAYJ,sBAAZ,CAAnB;AACA,QAAMK,WAAW,GAAGN,IAAI,CAACK,MAAL,CAAYJ,sBAAsB,GAAG,CAArC,CAApB;AACA,QAAMM,YAAY,GAAGP,IAAI,CAACG,KAAL,CAAWF,sBAAsB,GAAG,CAApC,CAArB;AACA,SAAQ,GAAEC,aAAc,GAAEI,WAAY,GAAEF,UAAW,GAAEG,YAAa,EAAlE;AACH,CATD;;AAWA,MAAMC,YAAY,GAAG,CAACR,IAAD,EAAOS,KAAP,KAAiB,CAErC,CAFD;;AAIA,eAAe,SAASC,SAAT,OAAoC;AAAA,MAAjB;AAAEV,IAAAA,IAAF;AAAQS,IAAAA;AAAR,GAAiB;AAE/C,MAAIE,aAAa,GAAI,GAAEX,IAAK,EAA5B;AAEAS,EAAAA,KAAK,CAACG,OAAN,CAAcC,OAAO,IAAI;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBF,OAAO,CAACG,MAAO,EAA9C;AACAL,IAAAA,aAAa,GAAGZ,WAAW,CAACY,aAAD,EAAgBE,OAAO,CAACG,MAAR,GAAiB,CAAjC,CAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAYJ,aAAc,GAAvC;AACH,GAJD;AAMA,sBACI;AAAA,4BACI;AAAA,gBAAKX;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAKW;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH;KAhBuBD,S","sourcesContent":["import styled from \"styled-components\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n    const beforeLetters =\n        leftSwapLetterPosition > 0 ?\n            word.slice(0, leftSwapLetterPosition) :\n            \"\";\n    const leftLetter = word.charAt(leftSwapLetterPosition);\n    const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n    const afterLetters = word.slice(leftSwapLetterPosition + 2);\n    return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n\n};\n\nexport default function GameBoard({ word, lines }) {\n\n    let scrambledWord = `${word}`;\n\n    lines.forEach(element => {\n        console.log(`Swapping column ${element.column}`);\n        scrambledWord = swapLetters(scrambledWord, element.column - 1);\n        console.log(`New word '${scrambledWord}'`);\n    });\n\n    return (\n        <>\n            <h1>{word}</h1>\n            <h1>{scrambledWord}</h1>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}