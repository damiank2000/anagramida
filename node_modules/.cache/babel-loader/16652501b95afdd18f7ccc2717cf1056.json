{"ast":null,"code":"const swapLetters = (word, leftSwapLetterPosition) => {\n  const beforeLetters = leftSwapLetterPosition > 0 ? word.slice(0, leftSwapLetterPosition) : \"\";\n  const leftLetter = word.charAt(leftSwapLetterPosition);\n  const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n  const afterLetters = word.slice(leftSwapLetterPosition + 2);\n  return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n  let scrambledWord = `${word}`;\n  lines.forEach(element => {\n    if (element.column) {\n      scrambledWord = swapLetters(scrambledWord, element.column - 1);\n    }\n  });\n  return scrambledWord;\n};\n\nexport function useScrambler() {\n  return {\n    scrambleWord\n  };\n}","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/useScrambler.js"],"names":["swapLetters","word","leftSwapLetterPosition","beforeLetters","slice","leftLetter","charAt","rightLetter","afterLetters","scrambleWord","lines","scrambledWord","forEach","element","column","useScrambler"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,IAAD,EAAOC,sBAAP,KAAkC;AAClD,QAAMC,aAAa,GACfD,sBAAsB,GAAG,CAAzB,GACID,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,sBAAd,CADJ,GAEI,EAHR;AAIA,QAAMG,UAAU,GAAGJ,IAAI,CAACK,MAAL,CAAYJ,sBAAZ,CAAnB;AACA,QAAMK,WAAW,GAAGN,IAAI,CAACK,MAAL,CAAYJ,sBAAsB,GAAG,CAArC,CAApB;AACA,QAAMM,YAAY,GAAGP,IAAI,CAACG,KAAL,CAAWF,sBAAsB,GAAG,CAApC,CAArB;AACA,SAAQ,GAAEC,aAAc,GAAEI,WAAY,GAAEF,UAAW,GAAEG,YAAa,EAAlE;AACH,CATD;;AAWA,MAAMC,YAAY,GAAG,CAACR,IAAD,EAAOS,KAAP,KAAiB;AAClC,MAAIC,aAAa,GAAI,GAAEV,IAAK,EAA5B;AAEAS,EAAAA,KAAK,CAACE,OAAN,CAAcC,OAAO,IAAI;AACrB,QAAIA,OAAO,CAACC,MAAZ,EAAoB;AAChBH,MAAAA,aAAa,GAAGX,WAAW,CAACW,aAAD,EAAgBE,OAAO,CAACC,MAAR,GAAiB,CAAjC,CAA3B;AACH;AACJ,GAJD;AAMA,SAAOH,aAAP;AACH,CAVD;;AAYA,OAAO,SAASI,YAAT,GAAwB;AAC3B,SAAO;AACHN,IAAAA;AADG,GAAP;AAGH","sourcesContent":["const swapLetters = (word, leftSwapLetterPosition) => {\n    const beforeLetters =\n        leftSwapLetterPosition > 0 ?\n            word.slice(0, leftSwapLetterPosition) :\n            \"\";\n    const leftLetter = word.charAt(leftSwapLetterPosition);\n    const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n    const afterLetters = word.slice(leftSwapLetterPosition + 2);\n    return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n    let scrambledWord = `${word}`;\n\n    lines.forEach(element => {\n        if (element.column) {\n            scrambledWord = swapLetters(scrambledWord, element.column - 1);\n        }\n    });\n\n    return scrambledWord;\n};\n\nexport function useScrambler() {\n    return {\n        scrambleWord\n    };\n}"]},"metadata":{},"sourceType":"module"}