{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/GameBoard.jsx\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n  const beforeLetters = leftSwapLetterPosition > 0 ? word.slice(0, leftSwapLetterPosition) : \"\";\n  const leftLetter = word.charAt(leftSwapLetterPosition);\n  const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n  const afterLetters = word.slice(leftSwapLetterPosition + 2);\n  return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n  let scrambledWord = `${word}`;\n  lines.forEach(element => {\n    scrambledWord = swapLetters(scrambledWord, element.column - 1);\n  });\n  return scrambledWord;\n};\n\nexport default function GameBoard(_ref) {\n  let {\n    word,\n    lines\n  } = _ref;\n  const scrambledWord = scrambleWord(word, lines);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": `line-row-${index + 1}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      \"aria-label\": scrambledWord,\n      children: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = GameBoard;\nexport function WordDisplay(word) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"aria-label\": word,\n    children: word\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_c2 = WordDisplay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"WordDisplay\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/GameBoard.jsx"],"names":["styled","swapLetters","word","leftSwapLetterPosition","beforeLetters","slice","leftLetter","charAt","rightLetter","afterLetters","scrambleWord","lines","scrambledWord","forEach","element","column","GameBoard","map","line","index","WordDisplay"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,mBAAnB;;;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,sBAAP,KAAkC;AAClD,QAAMC,aAAa,GACfD,sBAAsB,GAAG,CAAzB,GACID,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,sBAAd,CADJ,GAEI,EAHR;AAIA,QAAMG,UAAU,GAAGJ,IAAI,CAACK,MAAL,CAAYJ,sBAAZ,CAAnB;AACA,QAAMK,WAAW,GAAGN,IAAI,CAACK,MAAL,CAAYJ,sBAAsB,GAAG,CAArC,CAApB;AACA,QAAMM,YAAY,GAAGP,IAAI,CAACG,KAAL,CAAWF,sBAAsB,GAAG,CAApC,CAArB;AACA,SAAQ,GAAEC,aAAc,GAAEI,WAAY,GAAEF,UAAW,GAAEG,YAAa,EAAlE;AACH,CATD;;AAWA,MAAMC,YAAY,GAAG,CAACR,IAAD,EAAOS,KAAP,KAAiB;AAClC,MAAIC,aAAa,GAAI,GAAEV,IAAK,EAA5B;AAEAS,EAAAA,KAAK,CAACE,OAAN,CAAcC,OAAO,IAAI;AACrBF,IAAAA,aAAa,GAAGX,WAAW,CAACW,aAAD,EAAgBE,OAAO,CAACC,MAAR,GAAiB,CAAjC,CAA3B;AACH,GAFD;AAIA,SAAOH,aAAP;AACH,CARD;;AAUA,eAAe,SAASI,SAAT,OAAoC;AAAA,MAAjB;AAAEd,IAAAA,IAAF;AAAQS,IAAAA;AAAR,GAAiB;AAE/C,QAAMC,aAAa,GAAGF,YAAY,CAACR,IAAD,EAAOS,KAAP,CAAlC;AAEA,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,IAAI,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKS,KAAK,CAACM,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACP;AAAiB,qBAAc,YAAWA,KAAK,GAAG,CAAE;AAApD,OAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,YADH,CAFL,eAKI,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEP;AAAnB;AAAA;AAAA;AAAA;AAAA,YALJ,eAOI;AAAK,oBAAYA,aAAjB;AAAA,gBAAiCA;AAAjC;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBADJ;AAWH;KAfuBI,S;AAiBxB,OAAO,SAASI,WAAT,CAAqBlB,IAArB,EAA2B;AAC9B,sBACI;AAAK,kBAAYA,IAAjB;AAAA,cAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;MAJekB,W","sourcesContent":["import styled from \"styled-components\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n    const beforeLetters =\n        leftSwapLetterPosition > 0 ?\n            word.slice(0, leftSwapLetterPosition) :\n            \"\";\n    const leftLetter = word.charAt(leftSwapLetterPosition);\n    const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n    const afterLetters = word.slice(leftSwapLetterPosition + 2);\n    return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n    let scrambledWord = `${word}`;\n\n    lines.forEach(element => {\n        scrambledWord = swapLetters(scrambledWord, element.column - 1);\n    });\n\n    return scrambledWord;\n};\n\nexport default function GameBoard({ word, lines }) {\n\n    const scrambledWord = scrambleWord(word, lines);\n\n    return (\n        <>\n            <WordDisplay word={word} />\n            {lines.map((line, index) => (\n                <div key={index} data-testid={`line-row-${index + 1}`} />\n            ))}\n            <WordDisplay word={scrambledWord} />\n\n            <div aria-label={scrambledWord}>{scrambledWord}</div>\n        </>\n    );\n}\n\nexport function WordDisplay(word) {\n    return (\n        <div aria-label={word}>{word}</div>\n    );\n}"]},"metadata":{},"sourceType":"module"}