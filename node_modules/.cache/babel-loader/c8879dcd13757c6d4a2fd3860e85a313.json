{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/GameBoard.jsx\";\nimport styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n  const beforeLetters = leftSwapLetterPosition > 0 ? word.slice(0, leftSwapLetterPosition) : \"\";\n  const leftLetter = word.charAt(leftSwapLetterPosition);\n  const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n  const afterLetters = word.slice(leftSwapLetterPosition + 2);\n  return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n  let scrambledWord = `${word}`;\n  lines.forEach(element => {\n    if (element.column) {\n      scrambledWord = swapLetters(scrambledWord, element.column - 1);\n    }\n  });\n  return scrambledWord;\n};\n\nconst LineRow = styled.div`\n    height: 16px;\n    width: 100%;\n    border: none;\n    display: flex;\n    justify-content: space-between;\n`;\n_c = LineRow;\nconst DownwardLine = styled.div`\n    width: 16px;\n    height: 16px;\n    background-color: gray;\n    border-bottom: none;\n`;\n_c2 = DownwardLine;\nconst LineContainer = styled.div`\n    width: 100%;\n    height: 16px;\n    background-color: white;\n    border-bottom: none;\n`;\n_c3 = LineContainer;\nconst Line = styled.div`\n    width: 100%;\n    height: 2px;\n    background-color: black;\n`;\n_c4 = Line;\nconst GridDisplay = styled.div`\n    padding: 0 8px 0 8px;\n`;\n_c5 = GridDisplay;\nconst ButtonDisplay = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n_c6 = ButtonDisplay;\n\nconst handleButtonClicked = () => {};\n\nconst getButtons = numberOfButtons => {\n  let buttons = [];\n\n  for (var i = 0; i < numberOfButtons; i++) {\n    buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClicked,\n      children: \"v\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 22\n    }, this));\n  }\n\n  return buttons;\n};\n\nexport default function GameBoard(_ref) {\n  let {\n    word,\n    lines\n  } = _ref;\n  const scrambledWord = scrambleWord(word, lines);\n  console.log(lines);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n      children: getButtons(word.length - 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridDisplay, {\n      children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(LineRow, {\n        \"data-testid\": `line-row-${index + 1}`,\n        children: [...word].map((_, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DownwardLine, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this), index < word.length - 1 && (index === line.column - 1 ? /*#__PURE__*/_jsxDEV(Line, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(LineContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c7 = GameBoard;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"LineRow\");\n$RefreshReg$(_c2, \"DownwardLine\");\n$RefreshReg$(_c3, \"LineContainer\");\n$RefreshReg$(_c4, \"Line\");\n$RefreshReg$(_c5, \"GridDisplay\");\n$RefreshReg$(_c6, \"ButtonDisplay\");\n$RefreshReg$(_c7, \"GameBoard\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/GameBoard.jsx"],"names":["styled","WordDisplay","swapLetters","word","leftSwapLetterPosition","beforeLetters","slice","leftLetter","charAt","rightLetter","afterLetters","scrambleWord","lines","scrambledWord","forEach","element","column","LineRow","div","DownwardLine","LineContainer","Line","GridDisplay","ButtonDisplay","handleButtonClicked","getButtons","numberOfButtons","buttons","i","push","GameBoard","console","log","length","map","line","index","_"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n    const beforeLetters =\n        leftSwapLetterPosition > 0 ?\n            word.slice(0, leftSwapLetterPosition) :\n            \"\";\n    const leftLetter = word.charAt(leftSwapLetterPosition);\n    const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n    const afterLetters = word.slice(leftSwapLetterPosition + 2);\n    return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n    let scrambledWord = `${word}`;\n\n    lines.forEach(element => {\n        if (element.column) {\n            scrambledWord = swapLetters(scrambledWord, element.column - 1);\n        }\n    });\n\n    return scrambledWord;\n};\n\nconst LineRow = styled.div`\n    height: 16px;\n    width: 100%;\n    border: none;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst DownwardLine = styled.div`\n    width: 16px;\n    height: 16px;\n    background-color: gray;\n    border-bottom: none;\n`;\n\nconst LineContainer = styled.div`\n    width: 100%;\n    height: 16px;\n    background-color: white;\n    border-bottom: none;\n`;\n\nconst Line = styled.div`\n    width: 100%;\n    height: 2px;\n    background-color: black;\n`;\n\nconst GridDisplay = styled.div`\n    padding: 0 8px 0 8px;\n`;\n\nconst ButtonDisplay = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n\nconst handleButtonClicked = () => {\n    \n}\n\nconst getButtons = (numberOfButtons) => {\n    let buttons = [];\n    for (var i = 0; i < numberOfButtons; i++) {\n        buttons.push(<button onClick={handleButtonClicked}>v</button>);\n    }\n    return buttons;\n}\n\nexport default function GameBoard({ word, lines }) {\n\n    const scrambledWord = scrambleWord(word, lines);\n    console.log(lines);\n\n    return (\n        <>\n            <WordDisplay word={word} />\n            <ButtonDisplay>\n                {getButtons(word.length - 1)}\n            </ButtonDisplay>\n            <GridDisplay>\n                {lines.map((line, index) => (\n                    <LineRow key={index} data-testid={`line-row-${index + 1}`}>\n                        {[...word].map((_, index) => (\n                            <>\n                                <DownwardLine />\n                                {index < word.length - 1 &&\n                                    (index === (line.column - 1) ?\n                                        <Line /> :\n                                        <LineContainer />)\n                                }\n                            </>\n                        ))}\n                    </LineRow>\n                ))}\n            </GridDisplay>\n            <WordDisplay word={scrambledWord} />\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}