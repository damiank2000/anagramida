{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/GameBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\nimport { useScrambler } from \"./useScrambler\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LineRow = styled.div`\n    height: 16px;\n    width: 100%;\n    border: none;\n    display: flex;\n    justify-content: space-between;\n`;\n_c = LineRow;\nconst DownwardLine = styled.div`\n    width: 16px;\n    height: 16px;\n    background-color: gray;\n    border-bottom: none;\n`;\n_c2 = DownwardLine;\nconst LineContainer = styled.div`\n    width: 100%;\n    height: 16px;\n    background-color: white;\n    border-bottom: none;\n`;\n_c3 = LineContainer;\nconst Line = styled.div`\n    width: 100%;\n    height: 2px;\n    background-color: black;\n`;\n_c4 = Line;\nconst GridDisplay = styled.div`\n    padding: 0 8px 0 8px;\n`;\n_c5 = GridDisplay;\nconst ButtonDisplay = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n_c6 = ButtonDisplay;\nexport default function GameBoard(_ref) {\n  _s();\n\n  let {\n    word,\n    scrambledWord,\n    initialLines\n  } = _ref;\n  const [lines, setLines] = useState(initialLines);\n  const {\n    scrambleWord\n  } = useScrambler();\n  const unscrambledWord = scrambleWord(scrambledWord, lines);\n\n  const handleButtonClicked = index => {\n    setLines([{\n      column: index\n    }, ...lines]);\n  };\n\n  const getButtons = numberOfButtons => {\n    let buttons = [];\n\n    for (var i = 0; i < numberOfButtons; i++) {\n      const buttonIndex = i + 1;\n      buttons.push( /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": `button-${buttonIndex}`,\n        onClick: () => handleButtonClicked(buttonIndex),\n        children: \"v\"\n      }, `button-${buttonIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this));\n    }\n\n    return buttons;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonDisplay, {\n      children: getButtons(scrambledWord.length - 1)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridDisplay, {\n      children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(LineRow, {\n        \"data-testid\": `line-row-${index + 1}`,\n        children: [...scrambledWord].map((_, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DownwardLine, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this), index < word.length - 1 && (index === line.column - 1 ? /*#__PURE__*/_jsxDEV(Line, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(LineContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 41\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this))\n      }, `line-row-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: unscrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GameBoard, \"G5PiY592HGRUd0ZKfdKDIEfoVTM=\", false, function () {\n  return [useScrambler];\n});\n\n_c7 = GameBoard;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"LineRow\");\n$RefreshReg$(_c2, \"DownwardLine\");\n$RefreshReg$(_c3, \"LineContainer\");\n$RefreshReg$(_c4, \"Line\");\n$RefreshReg$(_c5, \"GridDisplay\");\n$RefreshReg$(_c6, \"ButtonDisplay\");\n$RefreshReg$(_c7, \"GameBoard\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/GameBoard.jsx"],"names":["styled","WordDisplay","useScrambler","React","useState","LineRow","div","DownwardLine","LineContainer","Line","GridDisplay","ButtonDisplay","GameBoard","word","scrambledWord","initialLines","lines","setLines","scrambleWord","unscrambledWord","handleButtonClicked","index","column","getButtons","numberOfButtons","buttons","i","buttonIndex","push","length","map","line","_"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\nimport { useScrambler } from \"./useScrambler\";\nimport React, { useState } from \"react\";\n\nconst LineRow = styled.div`\n    height: 16px;\n    width: 100%;\n    border: none;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst DownwardLine = styled.div`\n    width: 16px;\n    height: 16px;\n    background-color: gray;\n    border-bottom: none;\n`;\n\nconst LineContainer = styled.div`\n    width: 100%;\n    height: 16px;\n    background-color: white;\n    border-bottom: none;\n`;\n\nconst Line = styled.div`\n    width: 100%;\n    height: 2px;\n    background-color: black;\n`;\n\nconst GridDisplay = styled.div`\n    padding: 0 8px 0 8px;\n`;\n\nconst ButtonDisplay = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport default function GameBoard({ word, scrambledWord, initialLines }) {\n\n    const [lines, setLines] = useState(initialLines);\n    const { scrambleWord } = useScrambler();\n    const unscrambledWord = scrambleWord(scrambledWord, lines);\n\n    const handleButtonClicked = (index) => {\n        setLines([{ column: index }, ...lines]);\n    }\n\n    const getButtons = (numberOfButtons) => {\n        let buttons = [];\n        for (var i = 0; i < numberOfButtons; i++) {\n            const buttonIndex = i + 1;\n            buttons.push(\n                <button\n                    key={`button-${buttonIndex}`}\n                    data-testid={`button-${buttonIndex}`}\n                    onClick={() => handleButtonClicked(buttonIndex)}\n                >\n                    v\n            </button>\n            );\n        }\n        return buttons;\n    }\n\n    return (\n        <>\n            <WordDisplay word={scrambledWord} />\n            <ButtonDisplay>\n                {getButtons(scrambledWord.length - 1)}\n            </ButtonDisplay>\n            <GridDisplay>\n                {lines.map((line, index) => (\n                    <LineRow key={`line-row-${index}`} data-testid={`line-row-${index + 1}`}>\n                        {[...scrambledWord].map((_, index) => (\n                            <React.Fragment key={index}>\n                                <DownwardLine />\n                                {index < word.length - 1 &&\n                                    (index === (line.column - 1) ?\n                                        <Line /> :\n                                        <LineContainer />)\n                                }\n                            </React.Fragment>\n                        ))}\n                    </LineRow>\n                ))}\n            </GridDisplay>\n            <WordDisplay word={unscrambledWord} />\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}