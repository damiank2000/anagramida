{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/GameBoard.jsx\";\nimport styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n  const beforeLetters = leftSwapLetterPosition > 0 ? word.slice(0, leftSwapLetterPosition) : \"\";\n  const leftLetter = word.charAt(leftSwapLetterPosition);\n  const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n  const afterLetters = word.slice(leftSwapLetterPosition + 2);\n  return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n  let scrambledWord = `${word}`;\n  lines.forEach(element => {\n    scrambledWord = swapLetters(scrambledWord, element.column - 1);\n  });\n  return scrambledWord;\n};\n\nconst LineRow = styled.div`\n    height: 16px;\n    border: dashed 1px black;\n`;\n_c = LineRow;\nconst LineContainer = styled.div`\n    // border: dotted 1px black;\n`;\n_c2 = LineContainer;\nconst Line = styled.div`\n    // border-bottom: solid 3px black;\n`;\nexport default function GameBoard(_ref) {\n  let {\n    word,\n    lines\n  } = _ref;\n  const scrambledWord = scrambleWord(word, lines);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), lines.map((line, index) => /*#__PURE__*/_jsxDEV(LineRow, {\n      \"data-testid\": `line-row-${index + 1}`,\n      children: [...word].map((_, index) => /*#__PURE__*/_jsxDEV(LineContainer, {}, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(WordDisplay, {\n      word: scrambledWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c3 = GameBoard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LineRow\");\n$RefreshReg$(_c2, \"LineContainer\");\n$RefreshReg$(_c3, \"GameBoard\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/GameBoard.jsx"],"names":["styled","WordDisplay","swapLetters","word","leftSwapLetterPosition","beforeLetters","slice","leftLetter","charAt","rightLetter","afterLetters","scrambleWord","lines","scrambledWord","forEach","element","column","LineRow","div","LineContainer","Line","GameBoard","map","line","index","_"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,sBAAP,KAAkC;AAClD,QAAMC,aAAa,GACfD,sBAAsB,GAAG,CAAzB,GACID,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,sBAAd,CADJ,GAEI,EAHR;AAIA,QAAMG,UAAU,GAAGJ,IAAI,CAACK,MAAL,CAAYJ,sBAAZ,CAAnB;AACA,QAAMK,WAAW,GAAGN,IAAI,CAACK,MAAL,CAAYJ,sBAAsB,GAAG,CAArC,CAApB;AACA,QAAMM,YAAY,GAAGP,IAAI,CAACG,KAAL,CAAWF,sBAAsB,GAAG,CAApC,CAArB;AACA,SAAQ,GAAEC,aAAc,GAAEI,WAAY,GAAEF,UAAW,GAAEG,YAAa,EAAlE;AACH,CATD;;AAWA,MAAMC,YAAY,GAAG,CAACR,IAAD,EAAOS,KAAP,KAAiB;AAClC,MAAIC,aAAa,GAAI,GAAEV,IAAK,EAA5B;AAEAS,EAAAA,KAAK,CAACE,OAAN,CAAcC,OAAO,IAAI;AACrBF,IAAAA,aAAa,GAAGX,WAAW,CAACW,aAAD,EAAgBE,OAAO,CAACC,MAAR,GAAiB,CAAjC,CAA3B;AACH,GAFD;AAIA,SAAOH,aAAP;AACH,CARD;;AAUA,MAAMI,OAAO,GAAGjB,MAAM,CAACkB,GAAI;AAC3B;AACA;AACA,CAHA;KAAMD,O;AAKN,MAAME,aAAa,GAAGnB,MAAM,CAACkB,GAAI;AACjC;AACA,CAFA;MAAMC,a;AAIN,MAAMC,IAAI,GAAGpB,MAAM,CAACkB,GAAI;AACxB;AACA,CAFA;AAIA,eAAe,SAASG,SAAT,OAAoC;AAAA,MAAjB;AAAElB,IAAAA,IAAF;AAAQS,IAAAA;AAAR,GAAiB;AAE/C,QAAMC,aAAa,GAAGF,YAAY,CAACR,IAAD,EAAOS,KAAP,CAAlC;AAEA,sBACI;AAAA,4BACI,QAAC,WAAD;AAAa,MAAA,IAAI,EAAET;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKS,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACP,QAAC,OAAD;AAAqB,qBAAc,YAAWA,KAAK,GAAG,CAAE,EAAxD;AAAA,gBACK,CAAC,GAAGrB,IAAJ,EAAUmB,GAAV,CAAc,CAACG,CAAD,EAAID,KAAJ,kBACX,QAAC,aAAD,MAAoBA,KAApB;AAAA;AAAA;AAAA;AAAA,cADH;AADL,OAAcA,KAAd;AAAA;AAAA;AAAA;AAAA,YADH,CAFL,eAUI,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEX;AAAnB;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADJ;AAcH;MAlBuBQ,S","sourcesContent":["import styled from \"styled-components\";\nimport WordDisplay from \"./WordDisplay\";\n\nconst swapLetters = (word, leftSwapLetterPosition) => {\n    const beforeLetters =\n        leftSwapLetterPosition > 0 ?\n            word.slice(0, leftSwapLetterPosition) :\n            \"\";\n    const leftLetter = word.charAt(leftSwapLetterPosition);\n    const rightLetter = word.charAt(leftSwapLetterPosition + 1);\n    const afterLetters = word.slice(leftSwapLetterPosition + 2);\n    return `${beforeLetters}${rightLetter}${leftLetter}${afterLetters}`;\n};\n\nconst scrambleWord = (word, lines) => {\n    let scrambledWord = `${word}`;\n\n    lines.forEach(element => {\n        scrambledWord = swapLetters(scrambledWord, element.column - 1);\n    });\n\n    return scrambledWord;\n};\n\nconst LineRow = styled.div`\n    height: 16px;\n    border: dashed 1px black;\n`;\n\nconst LineContainer = styled.div`\n    // border: dotted 1px black;\n`;\n\nconst Line = styled.div`\n    // border-bottom: solid 3px black;\n`;\n\nexport default function GameBoard({ word, lines }) {\n\n    const scrambledWord = scrambleWord(word, lines);\n\n    return (\n        <>\n            <WordDisplay word={word} />\n            {lines.map((line, index) => (\n                <LineRow key={index} data-testid={`line-row-${index + 1}`}>\n                    {[...word].map((_, index) => (\n                        <LineContainer key={index} />\n                    )\n                    )}\n                </LineRow>\n            ))}\n            <WordDisplay word={scrambledWord} />\n        </>\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}