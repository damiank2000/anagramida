{"ast":null,"code":"var _jsxFileName = \"/Users/damiank/code/anagramida/src/Game.jsx\",\n    _s = $RefreshSig$();\n\nimport GameBoard from \"./GameBoard\";\nimport { useScrambler } from \"./useScrambler\";\nimport raw from \"./words.txt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = [\"cat\", \"dog\", \"think\", \"ostrich\", \"sausage\", \"saturday\", \"night\", \"takeaway\", \"anagram\"];\nfetch(raw).then(r => r.text()).then(text => {\n  words.push(text);\n});\n\nconst generateRandomLines = word => {\n  const highestColumn = word.length;\n  const numberOfRows = Math.floor(Math.random() * 20) + 1;\n  let rows = new Array();\n\n  for (var i = 0; i < numberOfRows; i++) {\n    const column = Math.floor(Math.random() * highestColumn) + 1;\n    rows.push({\n      column\n    });\n  }\n\n  return rows;\n};\n\nexport default function Game() {\n  _s();\n\n  const {\n    scrambleWord\n  } = useScrambler();\n  const word = words[Math.floor(Math.random() * words.length)];\n  const lines = generateRandomLines(word);\n  const scrambledWord = scrambleWord(word, lines);\n  return /*#__PURE__*/_jsxDEV(GameBoard, {\n    word: word,\n    scrambledWord: scrambledWord,\n    initialLines: []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"whd0BQvxwnqnZAlO8KFXQhAGkbU=\", false, function () {\n  return [useScrambler];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/damiank/code/anagramida/src/Game.jsx"],"names":["GameBoard","useScrambler","raw","words","fetch","then","r","text","push","generateRandomLines","word","highestColumn","length","numberOfRows","Math","floor","random","rows","Array","i","column","Game","scrambleWord","lines","scrambledWord"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,KAAK,GAAG,CACV,KADU,EAEV,KAFU,EAGV,OAHU,EAIV,SAJU,EAKV,SALU,EAMV,UANU,EAOV,OAPU,EAQV,UARU,EASV,SATU,CAAd;AAYAC,KAAK,CAACF,GAAD,CAAL,CACKG,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACVJ,EAAAA,KAAK,CAACK,IAAN,CAAWD,IAAX;AACH,CAJL;;AAMA,MAAME,mBAAmB,GAAIC,IAAD,IAAU;AAElC,QAAMC,aAAa,GAAGD,IAAI,CAACE,MAA3B;AACA,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAAtD;AAEA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAApB,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,UAAMC,MAAM,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,aAA3B,IAA4C,CAA3D;AACAM,IAAAA,IAAI,CAACT,IAAL,CAAU;AAAEY,MAAAA;AAAF,KAAV;AACH;;AACD,SAAOH,IAAP;AACH,CAXD;;AAcA,eAAe,SAASI,IAAT,GAAgB;AAAA;;AAE3B,QAAM;AAAEC,IAAAA;AAAF,MAAmBrB,YAAY,EAArC;AAEA,QAAMS,IAAI,GAAGP,KAAK,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,KAAK,CAACS,MAAjC,CAAD,CAAlB;AACA,QAAMW,KAAK,GAAGd,mBAAmB,CAACC,IAAD,CAAjC;AACA,QAAMc,aAAa,GAAGF,YAAY,CAACZ,IAAD,EAAOa,KAAP,CAAlC;AAEA,sBACI,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEb,IAAjB;AAAuB,IAAA,aAAa,EAAEc,aAAtC;AAAqD,IAAA,YAAY,EAAE;AAAnE;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAXuBH,I;UAEKpB,Y;;;KAFLoB,I","sourcesContent":["import GameBoard from \"./GameBoard\";\nimport { useScrambler } from \"./useScrambler\";\nimport raw from \"./words.txt\";\n\nconst words = [\n    \"cat\",\n    \"dog\",\n    \"think\",\n    \"ostrich\",\n    \"sausage\",\n    \"saturday\",\n    \"night\",\n    \"takeaway\",\n    \"anagram\"\n]\n\nfetch(raw)\n    .then(r => r.text())\n    .then(text => {\n        words.push(text);\n    });\n\nconst generateRandomLines = (word) => {\n\n    const highestColumn = word.length;\n    const numberOfRows = Math.floor(Math.random() * 20) + 1;\n\n    let rows = new Array();\n    for (var i = 0; i < numberOfRows; i++) {\n        const column = Math.floor(Math.random() * highestColumn) + 1;\n        rows.push({ column });\n    }\n    return rows;\n};\n\n\nexport default function Game() {\n\n    const { scrambleWord } = useScrambler();\n\n    const word = words[Math.floor(Math.random() * words.length)];\n    const lines = generateRandomLines(word);\n    const scrambledWord = scrambleWord(word, lines);\n\n    return (\n        <GameBoard word={word} scrambledWord={scrambledWord} initialLines={[]} />\n    );\n}"]},"metadata":{},"sourceType":"module"}